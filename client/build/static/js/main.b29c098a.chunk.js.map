{"version":3,"sources":["store/modal/index.ts","component/atoms/button/style.ts","component/atoms/button/index.tsx","constants/index.ts","component/atoms/timer/style.ts","component/atoms/timer/index.tsx","component/molecules/history/item/style.ts","component/molecules/history/item/index.tsx","component/molecules/history/style.ts","component/molecules/history/index.tsx","store/quiz/index.ts","store/quiz/selectors.ts","component/atoms/infoMessage/style.ts","component/atoms/infoMessage/index.tsx","component/atoms/radioButton/style.ts","component/atoms/radioButton/index.tsx","component/molecules/difficulty/style.ts","component/molecules/difficulty/index.tsx","component/organisms/intro/style.ts","component/organisms/intro/index.tsx","hooks/useRequest.ts","component/molecules/answer/style.ts","component/molecules/answer/index.tsx","utils/index.ts","component/organisms/quiz/style.ts","component/organisms/quiz/index.tsx","store/modal/selector.ts","style/index.ts","App.tsx","store/rootReducer.ts","store/rootSaga.ts","store/index.ts","store/configureStore.ts","index.tsx"],"names":["initialState","isOpen","modalSlice","createSlice","name","reducers","setIsOpen","state","action","payload","reset","actions","Button","styled","button","buttonType","disabled","sizeClass","size","PrimaryIcon","FontAwesomeIcon","onClick","children","icon","faChevronRight","DIFFICULTY","random","label","value","easy","medium","hard","QUIZ_MESSAGE","empty","correct","incorrect","Container","p","Timer","prefix","time","min","Math","floor","toString","slice","sec","div","Row","Item","item","setDate","difficulty","questions","NumberOfCorrectAnswer","splitSetDate","split","year","month","date","itemDate","replace","join","length","toFixed","Head","h3","Body","Foot","EmptyMessage","History","dispatch","useDispatch","useState","JSON","parse","window","localStorage","getItem","historyList","setHistoryList","map","console","log","removeItem","progress","elapsedTime","NumberOfIncorrectAnswer","answers","quizSlice","setProgress","setElapsedTime","setDifficulty","setQuestions","setAnswer","push","getQuizState","alignClass","align","InfoMessage","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","RadioButton","isChecked","handleChange","type","checked","onChange","Difficulty","selectedDifficulty","Title","h2","ButtonWrap","Intro","useSelector","data","request","fallbackData","config","useSWR","stringify","axios","status","statusText","headers","response","error","isValidating","mutate","useRequest","url","useMemo","process","Object","values","handleDifficulty","useCallback","useEffect","results","Answers","React","memo","selectedValue","array","randomIndex","currentIndex","utils","correct_answer","incorrect_answers","Inner","ended","Subject","ResultInfo","ul","Quiz","step","setStep","selected","setSelected","selectedAnswer","setSelectedAnswer","setTime","timeRef","useRef","current","setInterval","clearInterval","key","saveData","mergedItems","concat","setItem","saveToLocalstorage","Date","toLocaleString","question","prev","getModalState","GlobalStyle","createGlobalStyle","AppContainer","Modal","ReactModal","App","style","overlay","display","alignItems","justifyContent","backgroundColor","onRequestClose","rootReducer","combineReducers","rootSaga","all","store","sagaMiddleware","createSagaMiddleware","middlewares","startKitConfigureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","devTools","run","configureStore","ReactDOM","render","StrictMode","document","getElementById","setAppElement"],"mappings":"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","file":"static/js/main.b29c098a.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { IModalInitialState } from './types';\n\n/**\n * @description modal 상태관리\n * */\nconst initialState: IModalInitialState = {\n  isOpen: false,\n};\n\nexport const modalSlice = createSlice({\n  name: 'modal',\n  initialState,\n  reducers: {\n    setIsOpen: (state, action: PayloadAction<boolean>) => {\n      state.isOpen = action.payload;\n    },\n    // 초기화\n    reset: () => initialState,\n  },\n});\n\nexport const { setIsOpen, reset } = modalSlice.actions;\n\nexport default modalSlice.reducer;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport styled from 'styled-components';\nimport tw from 'twin.macro';\n\nexport const Button = styled.button<{\n  buttonType: 'default' | 'primary';\n  size: 'default' | 'large' | 'middle' | 'small';\n  disabled: boolean;\n}>`\n  ${({ buttonType }) =>\n    buttonType === 'default'\n      ? tw`text-gray-500 border border-gray-200 bg-white hover:bg-gray-50`\n      : tw`font-bold text-white border-2 border-subColor bg-mainColor bg-opacity-80 hover:bg-opacity-100`}\n\n  ${({ disabled }) =>\n    disabled\n      ? tw`text-gray-300 bg-gray-100 border border-gray-200 hover:bg-gray-100 cursor-default`\n      : tw` cursor-pointer`}\n  \n  ${({ size, buttonType }) => {\n    let sizeClass;\n    switch (size) {\n      case 'large':\n        sizeClass = tw`w-full`;\n        break;\n      case 'middle':\n        sizeClass = tw`w-1/2`;\n        break;\n      case 'small':\n        sizeClass = tw`w-1/3`;\n        break;\n      default:\n        sizeClass = buttonType === 'default' ? tw`w-1/2` : tw`w-full`;\n        break;\n    }\n    return sizeClass;\n  }}\n  ${tw`relative h-10 text-xs sm:h-10 sm:text-sm rounded-lg border-solid transition ease-in`}\n`;\n\nexport const PrimaryIcon = styled(FontAwesomeIcon)`\n  ${tw`absolute top-1/2 right-4`}\n  transform: translateY(-50%);\n`;\n","import { faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport React, { ReactElement } from 'react';\n\nimport { Button as StyledButton, PrimaryIcon } from './style';\nimport { IButtonProps } from './types';\n\nexport default function Button({\n  buttonType = 'default',\n  size = 'default',\n  disabled = false,\n  onClick,\n  children,\n}: IButtonProps): ReactElement {\n  return (\n    <StyledButton buttonType={buttonType} size={size} disabled={disabled} onClick={onClick}>\n      {children}\n      {buttonType === 'primary' && <PrimaryIcon icon={faChevronRight} />}\n    </StyledButton>\n  );\n}\n","import { IDifficulty } from './types';\n\nexport const DIFFICULTY: IDifficulty = {\n  random: {\n    label: '랜덤',\n    value: 'random',\n  },\n  easy: {\n    label: '쉬움',\n    value: 'easy',\n  },\n  medium: {\n    label: '보통',\n    value: 'medium',\n  },\n  hard: {\n    label: '어려움',\n    value: 'hard',\n  },\n};\n\nexport const QUIZ_MESSAGE = {\n  empty: '답을 선택해주세요 🧐',\n  correct: '정답이에요 🥳',\n  incorrect: '아쉬워요 😭',\n};\n","import styled from 'styled-components';\nimport tw from 'twin.macro';\n\nexport const Container = styled.p`\n  ${tw`font-light text-sm italic`}\n`;\n","import React, { ReactElement } from 'react';\n\nimport { Container } from './style';\n\nexport default function Timer({ prefix, time }: { prefix?: string; time: number }): ReactElement {\n  const min =\n    Math.floor(time / 60) < 10\n      ? '0' +\n        Math.floor(time / 60)\n          .toString()\n          .slice(-2)\n      : Math.floor(time / 60);\n  const sec = time % 60 < 10 ? '0' + (time % 60).toString().slice(-2) : time % 60;\n  return (\n    <Container>\n      {prefix && <span>{prefix} </span>}\n      <span children={`${min}:${sec}`} />\n    </Container>\n  );\n}\n","import styled from 'styled-components';\nimport tw from 'twin.macro';\n\nexport const Container = styled.div`\n  ${tw`grid grid-cols-3 gap-6 mb-2 pb-2 border-b border-solid border-gray-200`}\n`;\n\nexport const Row = styled.div`\n  ${tw`flex items-center justify-between `}\n\n  > span:first-child {\n    ${tw` tracking-tighter`}\n  }\n  span,\n  span p {\n    ${tw`text-sm font-normal not-italic`}\n  }\n`;\n","import React, { ReactElement } from 'react';\n\nimport { DIFFICULTY } from '../../../../constants';\nimport Timer from '../../../atoms/timer';\nimport { ISaveData } from '../../../organisms/quiz/types';\nimport { Container, Row } from './style';\n\nexport default function Item({ item }: { item: ISaveData }): ReactElement {\n  const { setDate, difficulty, questions, NumberOfCorrectAnswer, time } = item;\n  const splitSetDate = setDate.split(' ');\n  const [year, month, date] = splitSetDate;\n\n  const itemDate = [year.replace('.', ''), month.replace('.', ''), date.replace('.', '')].join('-');\n\n  return (\n    <Container>\n      <Row>\n        <span>{itemDate}</span>\n        <span>[{DIFFICULTY[difficulty].label}]</span>\n      </Row>\n      <Row>\n        <span>소요 시간</span>\n        <span>\n          <Timer time={time} />\n        </span>\n      </Row>\n      <Row>\n        <span>정답 비율</span>\n        <span>{((NumberOfCorrectAnswer / questions.length) * 100).toFixed(2)}%</span>\n      </Row>\n    </Container>\n  );\n}\n","import styled from 'styled-components';\nimport tw from 'twin.macro';\n\nexport const Container = styled.div`\n  ${tw`p-4`}\n`;\n\nexport const Head = styled.h3`\n  ${tw`font-bold text-xl text-gray-600 border-b border-dashed border-gray-400`}\n`;\n\nexport const Body = styled.div`\n  ${tw`overflow-y-auto my-4`}\n  max-height: 300px;\n`;\n\nexport const Foot = styled.div`\n  ${tw`flex justify-center space-x-2 w-full`}\n`;\n\nexport const EmptyMessage = styled.p`\n  ${tw`py-20 text-xl text-center`}\n`;\n","import React, { ReactElement, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { setIsOpen } from '../../../store/modal';\nimport Button from '../../atoms/button';\nimport { ISaveData } from '../../organisms/quiz/types';\nimport Item from './item';\nimport { Body, Container, EmptyMessage, Foot, Head } from './style';\n\nexport default function History(): ReactElement {\n  const dispatch = useDispatch();\n  const [historyList, setHistoryList] = useState(\n    JSON.parse(window.localStorage.getItem('quiz') || '[]') as ISaveData[],\n  );\n  const onClose = () => dispatch(setIsOpen(false));\n  const onRemove = () => {\n    window.localStorage.removeItem('quiz');\n    setHistoryList([]);\n  };\n  const onViewChart = () => console.log('준비중입니다.');\n\n  return (\n    <Container>\n      <Head>퀴즈 기록</Head>\n      <Body>\n        {historyList.length ? (\n          historyList.map(item => <Item key={`${item.setDate} + ${item.time}`} item={item} />)\n        ) : (\n          <EmptyMessage>기록이 존재하지 않습니다.</EmptyMessage>\n        )}\n      </Body>\n      <Foot>\n        {!!historyList.length && (\n          <>\n            <Button size={'small'} children={'차트 보기'} onClick={onViewChart} />\n            <Button size={'small'} children={'기록 전체 삭제'} onClick={onRemove} />\n          </>\n        )}\n        <Button size={'small'} children={'닫기'} onClick={onClose} />\n      </Foot>\n    </Container>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { IQuizInitialState, TQuestion } from './types';\n\n/**\n * @description Quiz 초기 값\n * */\nconst initialState: IQuizInitialState = {\n  progress: false,\n  elapsedTime: 0, // 경과시간\n  difficulty: 'random', // 난이도\n  NumberOfCorrectAnswer: 0, // 정답 수\n  NumberOfIncorrectAnswer: 0, // 오답 수\n  questions: [], // API response 문항 리스트\n  answers: [],\n};\n\nexport const quizSlice = createSlice({\n  name: 'quiz',\n  initialState,\n  reducers: {\n    setProgress: (state, action: PayloadAction<boolean>) => {\n      state.progress = action.payload;\n    },\n    // 경과 시간 세팅\n    setElapsedTime: (state, action: PayloadAction<number>) => {\n      state.elapsedTime = action.payload;\n    },\n    // 난이도 세팅\n    setDifficulty: (state, action: PayloadAction<string>) => {\n      state.difficulty = action.payload;\n    },\n    // API response 문항 리스트 세팅\n    setQuestions: (state, action: PayloadAction<TQuestion[]>) => {\n      state.questions = action.payload;\n    },\n    // 정답 오답 세팅\n    setAnswer: (state, action: PayloadAction<boolean>) => {\n      if (action.payload) {\n        state.NumberOfCorrectAnswer = state.NumberOfCorrectAnswer + 1;\n      } else {\n        state.NumberOfIncorrectAnswer = state.NumberOfIncorrectAnswer + 1;\n      }\n      state.answers.push(action.payload);\n    },\n    // 초기화\n    reset: () => initialState,\n  },\n});\n\nexport const { setProgress, setElapsedTime, setDifficulty, setQuestions, setAnswer, reset } = quizSlice.actions;\n\nexport default quizSlice.reducer;\n","import { RootState } from '../types';\nimport { IQuizInitialState } from './types';\n\n/**\n * @description 스토어에 저장된 Quiz 를 꺼낸다.\n * */\nexport const getQuizState = (state: RootState): IQuizInitialState => state.quizSlice;\n","import styled from 'styled-components';\nimport tw from 'twin.macro';\n\nexport const Container = styled.p<{ align: 'left' | 'center' | 'right' }>`\n  ${({ align }) => {\n    let alignClass;\n    switch (align) {\n      case 'center':\n        alignClass = tw`text-center`;\n        break;\n      case 'right':\n        alignClass = tw`text-right`;\n        break;\n      default:\n        alignClass = tw``;\n        break;\n    }\n    return alignClass;\n  }}\n\n  ${tw`mb-8 text-gray-500`}\n\n  span {\n    ${tw`font-bold text-mainColor`}\n  }\n`;\n","import DOMPurify from 'dompurify';\nimport React, { ReactElement } from 'react';\n\nimport { Container } from './style';\n\nexport default function InfoMessage({\n  align = 'left',\n  children,\n}: {\n  align?: 'left' | 'center' | 'right';\n  children: string;\n}): ReactElement {\n  return <Container align={align} dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(children) }} />;\n}\n","import styled from 'styled-components';\nimport tw from 'twin.macro';\n\nexport const Container = styled.label`\n  ${tw`text-center`}\n  font-size:0;\n  line-height: 0;\n\n  span {\n    ${tw`block w-16 px-2 py-2 text-gray-400 text-sm rounded-lg border border-solid border-gray-200 bg-white cursor-pointer`}\n  }\n\n  input[type='radio'] {\n    ${tw`absolute w-0 h-0 opacity-0`}\n  }\n\n  input[type='radio']:checked ~ span {\n    ${tw`font-semibold text-white border border-solid  border-subColor bg-subColor`}\n  }\n`;\n","import DOMPurify from 'dompurify';\nimport React, { ReactElement } from 'react';\n\nimport { Container } from './style';\nimport { IRadioButtonProps } from './types';\n\nexport default function RadioButton({ label, value, isChecked, handleChange }: IRadioButtonProps): ReactElement {\n  const onChange = () => handleChange(value);\n  return (\n    <Container>\n      <input type=\"radio\" value={value} checked={isChecked} onChange={onChange} />\n      <span dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(label) }} />\n    </Container>\n  );\n}\n","import styled from 'styled-components';\nimport tw from 'twin.macro';\n\nexport const Container = styled.div`\n  ${tw`flex items-center justify-center w-full my-4 space-x-2`}\n`;\n","import React, { ReactElement } from 'react';\n\nimport RadioButton from '../../atoms/radioButton';\nimport { Container } from './style';\nimport { IDifficultyProps } from './types';\n\nexport default function Difficulty({ selectedDifficulty, difficulty, handleChange }: IDifficultyProps): ReactElement {\n  return (\n    <Container>\n      {difficulty.map(({ label, value }) => (\n        <RadioButton\n          key={value}\n          label={label}\n          value={value}\n          isChecked={selectedDifficulty === value}\n          handleChange={handleChange}\n        />\n      ))}\n    </Container>\n  );\n}\n","import styled from 'styled-components';\nimport tw from 'twin.macro';\n\nexport const Container = styled.div`\n  ${tw`flex flex-col items-center w-10/12 p-4 sm:w-96 sm:p-20 border-2 border-solid border-subColor rounded-2xl bg-white`}\n`;\n\nexport const Title = styled.h2`\n  ${tw`text-xl sm:text-3xl text-center sm:leading-10 tracking-tighter`}\n  > span {\n    ${tw`block font-bold text-2xl sm:text-4xl text-subColor tracking-wider`}\n  }\n`;\n\nexport const ButtonWrap = styled.div`\n  ${tw`flex space-x-2 w-full`}\n`;\n","import React, { ReactElement, useCallback, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { DIFFICULTY } from '../../../constants';\nimport useRequest from '../../../hooks/useRequest';\nimport { setIsOpen } from '../../../store/modal';\nimport { setDifficulty, setProgress, setQuestions } from '../../../store/quiz';\nimport { getQuizState } from '../../../store/quiz/selectors';\nimport { TQuestion } from '../../../store/quiz/types';\nimport Button from '../../atoms/button';\nimport InfoMessage from '../../atoms/infoMessage';\nimport Difficulty from '../../molecules/difficulty';\nimport { ButtonWrap, Container, Title } from './style';\n\nexport default function Intro(): ReactElement {\n  const dispatch = useDispatch();\n  const { difficulty: selectedDifficulty } = useSelector(getQuizState);\n\n  const API = useMemo(() => {\n    return selectedDifficulty === 'random'\n      ? process.env.REACT_APP_API\n      : `${process.env.REACT_APP_API as string}&difficulty=${selectedDifficulty}`;\n  }, [selectedDifficulty]);\n\n  const { data } = useRequest<{ response_code: number; results: TQuestion[] }>({\n    url: API,\n  });\n\n  const difficulty = Object.values(DIFFICULTY);\n  const handleDifficulty = useCallback((value: string) => {\n    dispatch(setDifficulty(value));\n  }, []);\n\n  const handlePlayQuiz = () => dispatch(setProgress(true));\n  const onClickModal = () => dispatch(setIsOpen(true));\n\n  useEffect(() => {\n    if (data) dispatch(setQuestions(data.results));\n  }, [data]);\n\n  return (\n    <Container>\n      <Title>\n        클래스팅 프론트엔드 과제\n        <span>퀴즈를 풀어보세요!</span>\n      </Title>\n      <Difficulty selectedDifficulty={selectedDifficulty} difficulty={difficulty} handleChange={handleDifficulty} />\n      <InfoMessage children={`<span>${DIFFICULTY[selectedDifficulty].label}</span> 난이도를 선택하셨습니다`} />\n      {/*\n        Todo : onClick 시에 데이터 패치를해서 화면 전환 시키자.\n        - 현재는 로딩시 불러오는데 화면이 보이자마자 버튼을 누르면 없는데이터라 에러뜸\n        - 그래서 일단 임시로 disabled={!data} 와 같이 해둠..\n        - 이렇게 해두니까 일단은 괜찮은데 난이도 선택시 UI 스타일이 변하는게 조금 ... 불편..\n        - 그래서 핸들러에 데이터 패치를 해두자!\n      */}\n      <ButtonWrap>\n        <Button onClick={handlePlayQuiz} buttonType={'primary'} children={'퀴즈 풀기'} disabled={!data} />\n        <Button size={'small'} onClick={onClickModal} children={'기록보기'} />\n      </ButtonWrap>\n    </Container>\n  );\n}\n","import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport useSWR, { SWRConfiguration, SWRResponse } from 'swr';\n\nexport type GetRequest = AxiosRequestConfig | null;\n\ninterface Return<Data, Error>\n  extends Pick<SWRResponse<AxiosResponse<Data>, AxiosError<Error>>, 'isValidating' | 'error' | 'mutate'> {\n  data: Data | undefined;\n  response: AxiosResponse<Data> | undefined;\n}\n\nexport interface Config<Data = unknown, Error = unknown>\n  extends Omit<SWRConfiguration<AxiosResponse<Data>, AxiosError<Error>>, 'fallbackData'> {\n  fallbackData?: Data;\n}\n\nexport default function useRequest<Data = unknown, Error = unknown>(\n  request: GetRequest,\n  { fallbackData, ...config }: Config<Data, Error> = {},\n): Return<Data, Error> {\n  const {\n    data: response,\n    error,\n    isValidating,\n    mutate,\n  } = useSWR<AxiosResponse<Data>, AxiosError<Error>>(\n    request && JSON.stringify(request),\n    /**\n     * NOTE: Typescript thinks `request` can be `null` here, but the fetcher\n     * function is actually only called by `useSWR` when it isn't.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    () => axios.request<Data>(request!),\n    {\n      ...config,\n      fallbackData: fallbackData && {\n        status: 200,\n        statusText: 'InitialData',\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        config: request!,\n        headers: {},\n        data: fallbackData,\n      },\n    },\n  );\n\n  return {\n    data: response && response.data,\n    response,\n    error,\n    isValidating,\n    mutate,\n  };\n}\n","import styled from 'styled-components';\nimport tw from 'twin.macro';\n\nexport const Container = styled.div`\n  ${tw`mb-4`}\n\n  ul {\n    ${tw`grid grid-cols-2 gap-2 `}\n    li {\n      ${tw``}\n    }\n  }\n\n  label {\n    ${tw`flex flex-col h-full`}\n    span {\n      ${tw`flex justify-center items-center w-auto h-full`}\n    }\n  }\n`;\n","import React, { ReactElement, useMemo } from 'react';\n\nimport * as utils from '../../../utils';\nimport RadioButton from '../../atoms/radioButton';\nimport { Container } from './style';\nimport { IAnswerProps } from './types';\n\nconst Answers = React.memo(function Answers({ questions, handleChange, selectedValue }: IAnswerProps): ReactElement {\n  const answers = useMemo(() => utils.shuffle([questions.correct_answer, ...questions.incorrect_answers]), [questions]);\n\n  return (\n    <Container>\n      <ul>\n        {answers.map(item => (\n          <li key={item}>\n            <RadioButton label={item} value={item} isChecked={selectedValue === item} handleChange={handleChange} />\n          </li>\n        ))}\n      </ul>\n    </Container>\n  );\n});\n\nexport default Answers;\n","import { ISaveData } from '../component/organisms/quiz/types';\n\n/**\n * @description Fisher-Yates 피셔-예이츠 셔플\n * */\nexport function shuffle(array: string[]): string[] {\n  let currentIndex = array.length,\n    randomIndex;\n\n  while (currentIndex != 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\n/**\n * @description LocalStorage - 배열형태의 JSON data 를 저장한다.\n * @param {string} key 스토리지에 저장되는 key\n * @param {ISaveData[]} saveData 스토리지에 저장되는 데이터 ISaveData[]\n * @return void\n * */\nexport function saveToLocalstorage(key: string, saveData: ISaveData[]): void {\n  if (window.localStorage.getItem(key) !== null) {\n    const getItem = JSON.parse(window.localStorage.getItem(key) || '[]') as ISaveData[];\n    const mergedItems = getItem.concat(saveData);\n    localStorage.setItem(key, JSON.stringify(mergedItems));\n  } else {\n    window.localStorage.setItem(key, JSON.stringify([...saveData]));\n  }\n}\n","import styled from 'styled-components';\nimport tw from 'twin.macro';\n\nexport const Container = styled.div`\n  ${tw`flex flex-col w-10/12 sm:w-120 p-4 sm:p-8 border-2 border-solid border-mainColor rounded-2xl bg-subColor bg-opacity-20`}\n`;\n\nexport const Title = styled.h2`\n  ${tw`flex justify-between items-center`}\n  > span:first-child {\n    ${tw`font-bold text-3xl tracking-tighter italic`}\n    span {\n      ${tw`font-light`}\n    }\n  }\n  > span:last-child {\n    ${tw`text-sm text-mainColor text-opacity-80`}\n  }\n`;\n\nexport const Inner = styled.div<{ ended?: boolean }>`\n  ${tw`overflow-hidden relative flex flex-col p-4 sm:p-8 rounded-2xl bg-white`}\n\n  &::before {\n    ${tw`absolute -top-2 -left-2 font-black text-8xl text-subColor text-opacity-20 z-0`}\n    ${({ ended }) => (ended ? `content: '🎉'` : `content: 'Q'`)}\n  }\n`;\n\nexport const Subject = styled.p`\n  ${tw`relative mb-4 pb-3 font-bold text-xl text-gray-600 border-b border-dashed border-gray-400 leading-6`}\n`;\n\nexport const ResultInfo = styled.ul`\n  ${tw`mb-4 px-4`}\n  li {\n    ${tw`flex justify-between items-center `}\n    & + li {\n      ${tw`mt-2`}\n    }\n    span,\n    p {\n      ${tw`text-gray-400 font-normal not-italic`}\n    }\n  }\n`;\n\nexport const ButtonWrap = styled.div`\n  ${tw`flex space-x-2`}\n`;\n","import DOMPurify from 'dompurify';\nimport React, { ReactElement, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { DIFFICULTY, QUIZ_MESSAGE } from '../../../constants';\nimport { setIsOpen } from '../../../store/modal';\nimport { reset, setAnswer, setProgress } from '../../../store/quiz';\nimport { getQuizState } from '../../../store/quiz/selectors';\nimport { saveToLocalstorage } from '../../../utils';\nimport Button from '../../atoms/button';\nimport InfoMessage from '../../atoms/infoMessage';\nimport Timer from '../../atoms/timer';\nimport Answers from '../../molecules/answer';\nimport { ButtonWrap, Container, Inner, ResultInfo, Subject, Title } from './style';\n\nexport default function Quiz(): ReactElement {\n  const dispatch = useDispatch();\n  const { questions, difficulty, NumberOfCorrectAnswer, NumberOfIncorrectAnswer } = useSelector(getQuizState);\n\n  const [step, setStep] = useState(0);\n  const [selected, setSelected] = useState(true);\n  const [selectedAnswer, setSelectedAnswer] = useState('');\n  const [time, setTime] = useState(0);\n  const timeRef = useRef(time);\n\n  const handleSelectAnswer = (value: string) => {\n    setSelectedAnswer(value);\n    setSelected(false);\n  };\n\n  // 다음 문제 - 초기화 처리 | 정답 결과 리덕스에 저장\n  const onClickNext = () => {\n    setStep(prev => prev + 1);\n    setSelected(true);\n    setSelectedAnswer('');\n    dispatch(setAnswer(questions[step].correct_answer === selectedAnswer));\n  };\n\n  // 처음으로 - 초기화 처리\n  const onClickHome = () => {\n    dispatch(setProgress(false));\n    dispatch(reset());\n  };\n\n  // 다시 풀기 - Todo\n  const onClickRestart = () => {\n    console.log('@TODO : redux 에 저장된 문항으로 재시작하기!');\n  };\n\n  const onClickModal = () => dispatch(setIsOpen(true));\n\n  useEffect(() => {\n    timeRef.current = setInterval(() => setTime(time + 1), 1000) as unknown as number;\n    return () => clearInterval(timeRef.current);\n  }, [time]);\n\n  // 퀴즈 종료 - 타이머 종료 및 저장 | 기록 저장\n  useEffect(() => {\n    if (!questions[step]) {\n      clearInterval(timeRef.current);\n      const setDate = new Date().toLocaleString();\n      const saveData = [{ setDate, questions, difficulty, NumberOfCorrectAnswer, NumberOfIncorrectAnswer, time }];\n      saveToLocalstorage('quiz', saveData);\n    }\n  }, [step]);\n\n  return (\n    <Container>\n      {questions[step] ? (\n        <>\n          <Timer time={time} prefix={'[진행 시간]'} />\n          <Title>\n            <span>\n              <span>STEP{step + 1}.</span> QUIZ\n            </span>\n            <span>[{DIFFICULTY[questions[step].difficulty].label}]</span>\n          </Title>\n          <Inner>\n            <Subject dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(questions[step].question) }} />\n            <Answers questions={questions[step]} selectedValue={selectedAnswer} handleChange={handleSelectAnswer} />\n            <InfoMessage\n              align={'center'}\n              children={\n                QUIZ_MESSAGE[\n                  selectedAnswer === ''\n                    ? 'empty'\n                    : questions[step].correct_answer === selectedAnswer\n                    ? 'correct'\n                    : 'incorrect'\n                ]\n              }\n            />\n            <Button buttonType={'primary'} disabled={selected} onClick={onClickNext}>\n              다음 문제\n            </Button>\n          </Inner>\n        </>\n      ) : (\n        <>\n          <Inner ended={true}>\n            <Subject children={'클래스팅 퀴즈 종료! 수고하셨습니다 🥳'} />\n            <ResultInfo>\n              <li>\n                <span>난이도</span>\n                <span>{DIFFICULTY[difficulty].label}</span>\n              </li>\n              <li>\n                <span>소요 시간</span>\n                <span>\n                  <Timer time={time} />\n                </span>\n              </li>\n              <li>\n                <span>정답 개수</span>\n                <span>{NumberOfCorrectAnswer}</span>\n              </li>\n              <li>\n                <span>오답 수</span>\n                <span>{NumberOfIncorrectAnswer}</span>\n              </li>\n              <li>\n                <span>정답 비율</span>\n                <span>{((NumberOfCorrectAnswer / questions.length) * 100).toFixed(2)}%</span>\n              </li>\n            </ResultInfo>\n            <ButtonWrap>\n              <Button size={'small'} onClick={onClickHome} children={'처음으로'} />\n              <Button size={'small'} onClick={onClickModal} children={'기록보기'} />\n              <Button buttonType={'primary'} size={'small'} onClick={onClickRestart} children={'다시 풀기'} />\n            </ButtonWrap>\n          </Inner>\n        </>\n      )}\n    </Container>\n  );\n}\n","import { RootState } from '../types';\nimport { IModalInitialState } from './types';\n\n/**\n * @description 스토어에 저장된 modal\n * */\nexport const getModalState = (state: RootState): IModalInitialState => state.modalSlice;\n","import ReactModal from 'react-modal';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport reset from 'styled-reset';\nimport tw from 'twin.macro';\n\nexport const GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+KR:wght@200;300;400;500;600;700&display=swap');\n  :lang(ko){\n    font-family: 'IBM Plex Sans KR', sans-serif;\n  }\n  ${reset}\n\n  * {\n    ${tw`break-words antialiased`}\n  }\n\n  html, body {\n    ${tw`bg-backgroundColor h-screen`}\n  }\n  #root {\n   ${tw`h-full`} \n  }\n`;\n\nexport const AppContainer = styled.div`\n  ${tw`flex justify-center items-center h-full`}\n`;\n\nexport const Modal = styled(ReactModal)`\n  ${tw`w-11/12 sm:w-2/3 min-h-1/4 rounded-xl shadow bg-white`}\n`;\n","import React, { ReactElement } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport History from './component/molecules/history';\nimport Intro from './component/organisms/intro';\nimport Quiz from './component/organisms/quiz';\nimport { setIsOpen } from './store/modal';\nimport { getModalState } from './store/modal/selector';\nimport { getQuizState } from './store/quiz/selectors';\nimport { AppContainer, Modal } from './style';\n\nexport default function App(): ReactElement {\n  const dispatch = useDispatch();\n  const { progress } = useSelector(getQuizState);\n  const { isOpen } = useSelector(getModalState);\n\n  const onRequestClose = () => dispatch(setIsOpen(false));\n\n  return (\n    <AppContainer>\n      {progress ? <Quiz /> : <Intro />}\n      <Modal\n        style={{\n          overlay: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            backgroundColor: 'rgba(0, 0, 0, 0.3)',\n          },\n        }}\n        isOpen={isOpen}\n        onRequestClose={onRequestClose}\n        children={<History />}\n      />\n    </AppContainer>\n  );\n}\n","import { combineReducers } from 'redux';\n\nimport modalSlice from './modal';\nimport quizSlice from './quiz';\n\nconst rootReducer = combineReducers({\n  quizSlice,\n  modalSlice,\n});\n\nexport default rootReducer;\n","import { all } from 'redux-saga/effects';\n\nfunction* rootSaga(): Generator {\n  yield all([]);\n}\n\nexport default rootSaga;\n","import configureStore from './configureStore';\n\nconst store = configureStore();\n\nexport default store;\n","import { configureStore as startKitConfigureStore, EnhancedStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\nconst configureStore = (): EnhancedStore => {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const middlewares = [sagaMiddleware];\n\n  const store = startKitConfigureStore({\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware => getDefaultMiddleware({ serializableCheck: false }).concat(middlewares),\n    devTools: process.env.NODE_ENV !== 'production',\n  });\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './store';\nimport { GlobalStyle } from './style';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nModal.setAppElement('#root');\n"],"sourceRoot":""}